name: sample_app
services:
  # ----------------------------------------------------
  # Backend サービス: Go 言語の AP サーバー
  # ----------------------------------------------------
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=root:mysql@tcp(db:3306)/sample_db
      - TRACE_ENABLED=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    ports:
      - "9001:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost:8080/api/health || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - network

  # ----------------------------------------------------
  # Frontend サービス: クライアントサイドの Web アプリケーション
  # ----------------------------------------------------
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
    networks:
      - network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost:3000 || exit 1"]
      interval: 60s  # 15s → 60s に変更
      timeout: 10s
      retries: 5
      start_period: 60s
    ports:
      - "9002:3000"

  # ----------------------------------------------------
  # DB サービス: MySQL データベース
  # ----------------------------------------------------
  db:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: sample_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_LOG_CONSOLE: false
      # 初期化時のログを削減
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "9003:3306"
    networks:
      - network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 15
      interval: 60s  
      start_period: 60s  # ----------------------------------------------------
  # Nginx サービス: リバースプロキシと静的ファイル配信
  # ----------------------------------------------------
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "9000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - network
    command: ["nginx", "-g", "daemon off;"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost:80 || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ----------------------------------------------------
  # Jaeger サービス: 分散トレーシング
  # ----------------------------------------------------
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.46
    ports:
      - "9004:16686" # Jaeger UI
      - "9005:14268" # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=warn
    networks:
      - network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost:9004 || exit 1"]
      interval: 120s  # 30s → 120s に変更
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  network:
    driver: bridge
